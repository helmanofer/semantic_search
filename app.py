from flask import json
from lsh.random_projection import LshGaussianRandomProjection
import numpy
import requests
from requests.models import HTTPBasicAuth
from flask import Flask, render_template, jsonify

import fasttext
import fasttext.util
fasttext.util.download_model('en', if_exists='ignore')


class DummyFT:
    @classmethod
    def load_model(cls, path):
        return cls()

    def get_sentence_vector(self, query):
        return numpy.array(
            [
                -0.015088251791894436,
                0.029376668855547905,
                -0.009140269830822945,
                0.000994490459561348,
                0.0048726387321949005,
                0.03279024735093117,
                0.014720821753144264,
                0.023249518126249313,
                -0.0009318236261606216,
                0.0026983818970620632,
                -0.0013237384846433997,
                -0.016717135906219482,
                -0.029527083039283752,
                -0.009576784446835518,
                0.007640045136213303,
                -0.03229408338665962,
                -0.015896283090114594,
                0.0648648589849472,
                -0.027821525931358337,
                -0.006709029898047447,
                0.002300459425896406,
                0.0065643033012747765,
                0.0121549591422081,
                0.02272139862179756,
                0.03207101672887802,
                -0.019759003072977066,
                -0.012739313766360283,
                0.02550758793950081,
                0.021240729838609695,
                -0.0756121426820755,
                -0.01597502827644348,
                0.019318370148539543,
                -0.031640373170375824,
                -0.019451994448900223,
                -0.0009589195251464844,
                -0.011634372174739838,
                -0.009601382538676262,
                0.0126334298402071,
                0.012801527976989746,
                0.03797497972846031,
                0.0017433384200558066,
                -0.021829968318343163,
                -0.032194625586271286,
                0.02097524330019951,
                0.015556416474282742,
                -0.006247998680919409,
                0.03132905066013336,
                0.021179594099521637,
                0.010979516431689262,
                0.03582940623164177,
                0.08278629183769226,
                0.003615051042288542,
                0.01261559035629034,
                0.015070201829075813,
                0.009635502472519875,
                0.01298769935965538,
                -0.007650473155081272,
                -0.0032320767641067505,
                0.03368411213159561,
                0.0358249805867672,
                0.030661581084132195,
                -0.012001212686300278,
                -0.01293773390352726,
                0.023783791810274124,
                -0.021785441786050797,
                0.058833494782447815,
                0.060358963906764984,
                0.012817291542887688,
                0.01959412172436714,
                0.06713660061359406,
                -0.012970732524991035,
                -0.020950790494680405,
                0.01123277097940445,
                -0.01688268780708313,
                0.0003838620032183826,
                0.006007840391248465,
                0.018999939784407616,
                0.01950140669941902,
                -0.008389754220843315,
                0.009447162039577961,
                0.009303453378379345,
                0.026488518342375755,
                -0.026810627430677414,
                0.07055851817131042,
                -0.036369189620018005,
                -0.007856998592615128,
                -0.005475135054439306,
                -0.021899651736021042,
                -0.25005000829696655,
                0.024434145539999008,
                -0.01332621555775404,
                -0.023824451491236687,
                -0.029025979340076447,
                0.05356605350971222,
                -0.0056616030633449554,
                -0.0012383328285068274,
                0.019222624599933624,
                -0.0136027242988348,
                0.011753469705581665,
                -0.05017797648906708,
                -0.021483391523361206,
                -0.012502200901508331,
                0.0019306171452626586,
                -0.0050001246854662895,
                -0.02169281803071499,
                -0.044543828815221786,
                -0.011399391107261181,
                -0.05997247248888016,
                -0.003048380371183157,
                0.01885758712887764,
                0.013148268684744835,
                -0.035677336156368256,
                0.09525544941425323,
                0.04221396893262863,
                0.025925522670149803,
                0.009715277701616287,
                0.022670365869998932,
                -0.011989753693342209,
                0.006802923511713743,
                0.01600070111453533,
                0.013858739286661148,
                0.014347733929753304,
                0.03182349354028702,
                0.025834117084741592,
                -0.026242457330226898,
                0.049464866518974304,
                -0.020341629162430763,
                0.015411091968417168,
                0.0020823050290346146,
                0.04223714396357536,
                -0.007495682220906019,
                0.03420853987336159,
                0.04947441443800926,
                0.024025103077292442,
                -0.0024339198134839535,
                -0.0045363218523561954,
                0.03805599361658096,
                0.03386398404836655,
                -0.031181974336504936,
                0.0032057068310678005,
                -0.00147351436316967,
                -0.03392317146062851,
                0.050262700766325,
                -0.012811936438083649,
                0.011203721165657043,
                -0.027392197400331497,
                -0.05894294008612633,
                -0.015390242449939251,
                -0.0247601680457592,
                0.02959296852350235,
                -0.028615456074476242,
                -0.04468248412013054,
                -0.0050112660974264145,
                -0.0013472754508256912,
                0.01325059961527586,
                -0.017521921545267105,
                -0.036691971123218536,
                -0.04669786989688873,
                -0.023207908496260643,
                -0.0037731854245066643,
                -0.001973790116608143,
                -0.04034314304590225,
                0.00543341925367713,
                -0.030629752203822136,
                0.03600841015577316,
                0.021237945184111595,
                -0.05414319038391113,
                0.009019760414958,
                0.019943607971072197,
                -0.0005152467638254166,
                -0.016359278932213783,
                0.03278438746929169,
                0.009103654883801937,
                -0.02076222561299801,
                0.013239474967122078,
                -0.040892601013183594,
                -0.005112554877996445,
                0.0036699955817312002,
                -0.030811481177806854,
                -0.028521127998828888,
                0.023555826395750046,
                0.00951229128986597,
                0.032812803983688354,
                -0.018082818016409874,
                0.009798469953238964,
                -0.004244305193424225,
                0.0032200380228459835,
                -0.021317515522241592,
                -0.0015444390010088682,
                0.0027204162906855345,
                -0.017584817484021187,
                0.026965713128447533,
                0.03595956414937973,
                0.011678661219775677,
                -0.003939064219594002,
                -0.01257368829101324,
                0.01138146873563528,
                -0.0289476178586483,
                0.026594679802656174,
                -0.013559523038566113,
                -0.007356544956564903,
                -0.000745870522223413,
                0.018518712371587753,
                -0.00800141878426075,
                0.02917834185063839,
                0.010178007185459137,
                -0.009373604319989681,
                0.021047141402959824,
                -0.033849652856588364,
                -0.008061738684773445,
                0.009198924526572227,
                -0.03662829101085663,
                0.02311934530735016,
                0.0029109283350408077,
                -0.02618568390607834,
                0.031095243990421295,
                0.029214348644018173,
                -0.005172692704945803,
                -0.013028486631810665,
                -0.013350149616599083,
                -0.02188229374587536,
                0.02076428383588791,
                -0.0005541670834645629,
                0.01455056481063366,
                0.018835581839084625,
                -0.010433627292513847,
                -0.009835304692387581,
                -0.020873835310339928,
                0.01961052045226097,
                0.027047915384173393,
                -0.010972241871058941,
                0.050066329538822174,
                -0.049849461764097214,
                0.03376684710383415,
                0.01497751846909523,
                0.0016852108528837562,
                -0.033616114407777786,
                -0.03687693923711777,
                0.0028471853584051132,
                0.007432139944285154,
                0.0018755178898572922,
                0.015805203467607498,
                -0.0004644108412321657,
                -0.06555860489606857,
                -0.012425877153873444,
                0.03624173626303673,
                0.03233233839273453,
                -0.006039509549736977,
                -0.0019345320761203766,
                -0.014036274515092373,
                0.022503908723592758,
                0.0014931646874174476,
                -0.011565417051315308,
                -0.007196651306003332,
                -0.00037780156708322465,
                0.0017538557294756174,
                0.004264986142516136,
                -0.014115079306066036,
                -0.0012897452106699347,
                -0.028139565140008926,
                -0.037981800734996796,
                0.004214244894683361,
                0.021107567474246025,
                0.0002791987208183855,
                -0.001246409141458571,
                0.022718805819749832,
                0.008268035016953945,
                0.053188737481832504,
                -0.0072755031287670135,
                -0.011298459023237228,
                -0.005069301929324865,
                0.01864846609532833,
                -0.04314412176609039,
                -0.015889763832092285,
                0.06588221341371536,
                -0.0002755100722424686,
                -0.06879104673862457,
                0.017134428024291992,
                0.01932372711598873,
                -0.0076314425095915794,
                0.0089319609105587,
                0.0006489502266049385,
                -0.015870368108153343,
                -0.04051748290657997,
                -0.05442578345537186,
                0.009841703809797764,
                -0.024642815813422203,
                -0.012510817497968674,
                -0.029834982007741928,
                0.023859307169914246,
                -0.022183943539857864,
                -0.030703691765666008,
                -0.003459775820374489,
                0.033555980771780014,
                -0.04290097579360008,
                0.02581707201898098,
                0.03308304399251938,
                0.009253080934286118,
                0.00458428543061018,
                -0.034502942115068436,
            ]
        )


ft = DummyFT.load_model("cc.he.300.bin")
lsh_g = LshGaussianRandomProjection(
    vector_dimension=300, bucket_size=4, num_of_buckets=40, seed=4
)
lsh_g.fit()

columns = [
    {
        "field": "id",  # which is the field's name of data key
        "title": "id",  # display as the table header's name
        "sortable": True,
    },
    {
        "field": "text",
        "title": "text",
        "sortable": False,
    },
]

app = Flask(__name__)

@app.route("/search")
@app.route("/search/<query>")
def search(query=None):
    if not query:
        return render_template("search.html", data=[], columns=columns)
    q_vec = ft.get_sentence_vector(query)
    lsh = " ".join(lsh_g.indexable_transform(q_vec))
    q = {
        "stored_fields": [],
        "query": {
            "nested": {
                "path": "paragraphs",
                "query": {
                    "match": {
                        "paragraphs.lsh": {
                            "query": lsh,
                            "minimum_should_match": "40%",
                        }
                    }
                },
                "score_mode": "avg",
            }
        },
        "highlight": {
            "no_match_size": 40,
            "pre_tags": ["<mark>"],
            "post_tags": ["</mark>"],
            "highlight_query": {"match": {"text": query}},
            "fields": {"text": {"type": "unified"}},
        },
    }

    print(json.dumps(q, indent=" "))
    res = requests.get(
        url="http://127.0.0.1:9200/tapuz/_search",
        json=q,
        auth=HTTPBasicAuth("admin", "admin"),
        verify=False,
    )

    items = []
    jres = res.json()
    for r in jres["hits"]["hits"]:
        items.append(
            dict(
                id=r["_id"],
                text=" ... ".join(r.get("highlight", {}).get("text", [])),
            )
        )
    app.logger.info(f"got data {items}")
    return jsonify(items)


if __name__ == "__main__":
    app.run(host="0.0.0.0", debug=True)
